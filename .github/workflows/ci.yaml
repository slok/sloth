name: SLOth CI

on:
  pull_request:
    branches: [ "*" ]
  push:
    branches: [ "master" ]
    tags: [ "*" ]

permissions:
  contents: read
  id-token: write

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    # Execute the checks inside the container instead the VM.
    container: golangci/golangci-lint:v1.50.0-alpine
    steps:
      - uses: actions/checkout@v3
      - run: ./scripts/check/check.sh

  unit-test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - run: make ci-test


  helm-chart-test:
    name: Helm chart test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Execute tests
        env:
          HELM_VERSION: v3.6.3
        run: |
          # Get dependencies.
          echo "Getting dependencies..."
          curl -L https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -xz && mv ./linux-amd64/helm /usr/local/bin &&  chmod +x /usr/local/bin/helm
          make ci-helm-test

  integration-test-cli:
    name: Integration test CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Execute tests
        run: |
          # Build binary.
          echo "Building binary..."
          make ci-build
          sudo mv ./bin/sloth /usr/local/bin/

          # Execute integration tests.
          echo "Executing integration tests..."
          make ci-integration-cli

  integration-test-k8s:
    name: Integration test Kubernetes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubernetes: [1.21.14, 1.22.15, 1.23.12, 1.24.6, 1.25.2]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
      - name: Execute tests
        env:
          KIND_VERSION: v0.16.0
        run: |
          # Get dependencies.
          echo "Getting dependencies..."
          curl -Lo kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-amd64 && chmod +x kind && sudo mv kind /usr/local/bin/
          curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v${{ matrix.kubernetes }}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/

          # Start cluster.
          echo "Starting ${{ matrix.kubernetes }} Kubernetes cluster..."
          kind create cluster --image kindest/node:v${{ matrix.kubernetes }}
          kind get kubeconfig > /tmp/test.kubeconfig

          # Register CRDs.
          kubectl apply -f ./pkg/kubernetes/gen/crd/
          kubectl apply -f ./test/integration/crd

          # Build binary.
          echo "Building binary..."
          make ci-build
          sudo mv ./bin/sloth /usr/local/bin/

          # Execute integration tests.
          echo "Executing integration tests..."
          export SLOTH_INTEGRATION_KUBE_CONFIG=/tmp/test.kubeconfig
          make ci-integration-k8s

  rolling-release-images:
    needs: [check, unit-test, integration-test-cli, integration-test-k8s, helm-chart-test]
    name: Release images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker Image
        run: docker build --build-arg="GIT_SSH_KEY=${{ env.GIT_SSH_KEY }}" --build-arg="KNOWN_HOSTS_CONTENT=${{ env.KNOWN_HOSTS_CONTENT }}" . --file Dockerfile --tag local-tag
      - name: Publish Image
        uses: Workiva/gha-docker-push@v2.0.31
        with:
          local-tag: local-tag
