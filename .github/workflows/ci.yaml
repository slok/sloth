name: CI

on: [push, pull_request]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    # Execute the checks inside the container instead the VM.
    container: golangci/golangci-lint:v1.50.0-alpine
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/check/check.sh

  unit-test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - run: make ci-test

  helm-chart-test:
    name: Helm chart test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Execute tests
        uses: azure/setup-helm@v4
      - run: |
          make ci-helm-test

  integration-test-cli:
    name: Integration test CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Execute tests
        run: |
          echo "Building binary..."
          make ci-build
          sudo mv ./bin/sloth /usr/local/bin/

          echo "Executing integration tests..."
          make ci-integration-cli

  integration-test-k8s:
    name: Integration test Kubernetes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        kubernetes: [1.30.8, 1.31.4, 1.32.0]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - name: Set up Kind
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:v${{ matrix.kubernetes }}
      - name: Set up Helm
        uses: azure/setup-helm@v4
      - name: Execute tests
        env:
          SLOTH_INTEGRATION_KUBE_CONFIG: ${{ env.KUBECONFIG }}
        run: |
          # Register CRDs.
          kubectl apply -f ./pkg/kubernetes/gen/crd/
          kubectl apply -f ./test/integration/crd

          # Build binary.
          echo "Building binary..."
          make ci-build
          sudo mv ./bin/sloth /usr/local/bin/

          # Execute integration tests.
          echo "Executing integration tests..."
          export SLOTH_INTEGRATION_KUBE_CONFIG=/tmp/test.kubeconfig
          make ci-integration-k8s

  tagged-release-images:
    # Only on tags.
    if: startsWith(github.ref, 'refs/tags/')
    env:
      PROD_IMAGE_NAME: ghcr.io/${GITHUB_REPOSITORY}
    needs: [check, unit-test, integration-test-cli, integration-test-k8s, helm-chart-test]
    name: Tagged release images
    runs-on: ubuntu-latest
    steps:
      - run: echo "VERSION=${GITHUB_REF#refs/*/}" >> ${GITHUB_ENV} # Sets VERSION env var.
      - uses: actions/checkout@v4
      - name: Setup docker
        uses: ./github-actions/actions/docker-setup
        id: setup-app-docker
        with:
          app-name: sloth
          docker-username: ${{ secrets.DOCKER_HUB_USERNAME }}
          docker-password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Get runner Architecture
        run: |
          ARCH=$(uname -m)
          echo "Runner Architecture (uname): $ARCH"
          echo "runner_arch=$ARCH" >> $GITHUB_ENV
      - name: Build docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/prod/Dockerfile
          tags: |
            ${{ steps.setup-app-docker.outputs.docker-image }}
          load: true
          build-args: |
            VERSION=${{ github.ref_name }}
            ARCH=${{ env.runner_arch }}
      #       GH_NPM_REGISTRY_TOKEN=${{ secrets.GH_NPM_REGISTRY_TOKEN }}
      # - name: Push docker image
      #   run: docker push ${{ steps.setup-app-docker.outputs.docker-image }}
