// Code generated by 'yaegi extract github.com/caarlos0/env/v11'. DO NOT EDIT.

package custom

import (
	"github.com/caarlos0/env/v11"
	"reflect"
)

func init() {
	Symbols["github.com/caarlos0/env/v11/env"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"GetFieldParams":            reflect.ValueOf(env.GetFieldParams),
		"GetFieldParamsWithOptions": reflect.ValueOf(env.GetFieldParamsWithOptions),
		"Parse":                     reflect.ValueOf(env.Parse),
		"ParseWithOptions":          reflect.ValueOf(env.ParseWithOptions),
		"ToMap":                     reflect.ValueOf(env.ToMap),

		// type definitions
		"AggregateError":            reflect.ValueOf((*env.AggregateError)(nil)),
		"EmptyEnvVarError":          reflect.ValueOf((*env.EmptyEnvVarError)(nil)),
		"EmptyVarError":             reflect.ValueOf((*env.EmptyVarError)(nil)),
		"EnvVarIsNotSetError":       reflect.ValueOf((*env.EnvVarIsNotSetError)(nil)),
		"FieldParams":               reflect.ValueOf((*env.FieldParams)(nil)),
		"LoadFileContentError":      reflect.ValueOf((*env.LoadFileContentError)(nil)),
		"NoParserError":             reflect.ValueOf((*env.NoParserError)(nil)),
		"NoSupportedTagOptionError": reflect.ValueOf((*env.NoSupportedTagOptionError)(nil)),
		"NotStructPtrError":         reflect.ValueOf((*env.NotStructPtrError)(nil)),
		"OnSetFn":                   reflect.ValueOf((*env.OnSetFn)(nil)),
		"Options":                   reflect.ValueOf((*env.Options)(nil)),
		"ParseError":                reflect.ValueOf((*env.ParseError)(nil)),
		"ParseValueError":           reflect.ValueOf((*env.ParseValueError)(nil)),
		"ParserFunc":                reflect.ValueOf((*env.ParserFunc)(nil)),
		"VarIsNotSetError":          reflect.ValueOf((*env.VarIsNotSetError)(nil)),
	}
}
