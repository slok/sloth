// Code generated by 'yaegi extract github.com/prometheus/prometheus/promql/parser'. DO NOT EDIT.

package custom

import (
	"github.com/prometheus/prometheus/promql/parser"
	"github.com/prometheus/prometheus/promql/parser/posrange"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/prometheus/prometheus/promql/parser/parser"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ADD":                          reflect.ValueOf(constant.MakeFromLiteral("57383", token.INT, 0)),
		"ANCHORED":                     reflect.ValueOf(constant.MakeFromLiteral("57427", token.INT, 0)),
		"AT":                           reflect.ValueOf(constant.MakeFromLiteral("57400", token.INT, 0)),
		"ATAN2":                        reflect.ValueOf(constant.MakeFromLiteral("57401", token.INT, 0)),
		"AVG":                          reflect.ValueOf(constant.MakeFromLiteral("57404", token.INT, 0)),
		"BLANK":                        reflect.ValueOf(constant.MakeFromLiteral("57347", token.INT, 0)),
		"BOOL":                         reflect.ValueOf(constant.MakeFromLiteral("57420", token.INT, 0)),
		"BOTTOMK":                      reflect.ValueOf(constant.MakeFromLiteral("57405", token.INT, 0)),
		"BUCKETS_DESC":                 reflect.ValueOf(constant.MakeFromLiteral("57375", token.INT, 0)),
		"BY":                           reflect.ValueOf(constant.MakeFromLiteral("57421", token.INT, 0)),
		"CLOSE_HIST":                   reflect.ValueOf(constant.MakeFromLiteral("57359", token.INT, 0)),
		"COLON":                        reflect.ValueOf(constant.MakeFromLiteral("57348", token.INT, 0)),
		"COMMA":                        reflect.ValueOf(constant.MakeFromLiteral("57349", token.INT, 0)),
		"COMMENT":                      reflect.ValueOf(constant.MakeFromLiteral("57350", token.INT, 0)),
		"COUNT":                        reflect.ValueOf(constant.MakeFromLiteral("57406", token.INT, 0)),
		"COUNTER_RESET":                reflect.ValueOf(constant.MakeFromLiteral("57438", token.INT, 0)),
		"COUNTER_RESET_HINT_DESC":      reflect.ValueOf(constant.MakeFromLiteral("57380", token.INT, 0)),
		"COUNT_DESC":                   reflect.ValueOf(constant.MakeFromLiteral("57371", token.INT, 0)),
		"COUNT_VALUES":                 reflect.ValueOf(constant.MakeFromLiteral("57407", token.INT, 0)),
		"CUSTOM_VALUES_DESC":           reflect.ValueOf(constant.MakeFromLiteral("57379", token.INT, 0)),
		"CardManyToMany":               reflect.ValueOf(parser.CardManyToMany),
		"CardManyToOne":                reflect.ValueOf(parser.CardManyToOne),
		"CardOneToMany":                reflect.ValueOf(parser.CardOneToMany),
		"CardOneToOne":                 reflect.ValueOf(parser.CardOneToOne),
		"Children":                     reflect.ValueOf(parser.Children),
		"ChildrenIter":                 reflect.ValueOf(parser.ChildrenIter),
		"DIV":                          reflect.ValueOf(constant.MakeFromLiteral("57384", token.INT, 0)),
		"DURATION":                     reflect.ValueOf(constant.MakeFromLiteral("57351", token.INT, 0)),
		"DocumentedType":               reflect.ValueOf(parser.DocumentedType),
		"END":                          reflect.ValueOf(constant.MakeFromLiteral("57433", token.INT, 0)),
		"EOF":                          reflect.ValueOf(constant.MakeFromLiteral("57352", token.INT, 0)),
		"EQL":                          reflect.ValueOf(constant.MakeFromLiteral("57346", token.INT, 0)),
		"EQLC":                         reflect.ValueOf(constant.MakeFromLiteral("57385", token.INT, 0)),
		"EQL_REGEX":                    reflect.ValueOf(constant.MakeFromLiteral("57386", token.INT, 0)),
		"ERROR":                        reflect.ValueOf(constant.MakeFromLiteral("57353", token.INT, 0)),
		"EnableExperimentalFunctions":  reflect.ValueOf(&parser.EnableExperimentalFunctions).Elem(),
		"EnableExtendedRangeSelectors": reflect.ValueOf(&parser.EnableExtendedRangeSelectors).Elem(),
		"EnrichParseError":             reflect.ValueOf(parser.EnrichParseError),
		"ExperimentalDurationExpr":     reflect.ValueOf(&parser.ExperimentalDurationExpr).Elem(),
		"ExtractSelectors":             reflect.ValueOf(parser.ExtractSelectors),
		"Functions":                    reflect.ValueOf(&parser.Functions).Elem(),
		"GAUGE_TYPE":                   reflect.ValueOf(constant.MakeFromLiteral("57440", token.INT, 0)),
		"GROUP":                        reflect.ValueOf(constant.MakeFromLiteral("57408", token.INT, 0)),
		"GROUP_LEFT":                   reflect.ValueOf(constant.MakeFromLiteral("57422", token.INT, 0)),
		"GROUP_RIGHT":                  reflect.ValueOf(constant.MakeFromLiteral("57423", token.INT, 0)),
		"GTE":                          reflect.ValueOf(constant.MakeFromLiteral("57387", token.INT, 0)),
		"GTR":                          reflect.ValueOf(constant.MakeFromLiteral("57388", token.INT, 0)),
		"IDENTIFIER":                   reflect.ValueOf(constant.MakeFromLiteral("57354", token.INT, 0)),
		"IGNORING":                     reflect.ValueOf(constant.MakeFromLiteral("57424", token.INT, 0)),
		"Inspect":                      reflect.ValueOf(parser.Inspect),
		"ItemTypeStr":                  reflect.ValueOf(&parser.ItemTypeStr).Elem(),
		"LAND":                         reflect.ValueOf(constant.MakeFromLiteral("57389", token.INT, 0)),
		"LEFT_BRACE":                   reflect.ValueOf(constant.MakeFromLiteral("57355", token.INT, 0)),
		"LEFT_BRACKET":                 reflect.ValueOf(constant.MakeFromLiteral("57356", token.INT, 0)),
		"LEFT_PAREN":                   reflect.ValueOf(constant.MakeFromLiteral("57357", token.INT, 0)),
		"LIMITK":                       reflect.ValueOf(constant.MakeFromLiteral("57416", token.INT, 0)),
		"LIMIT_RATIO":                  reflect.ValueOf(constant.MakeFromLiteral("57417", token.INT, 0)),
		"LOR":                          reflect.ValueOf(constant.MakeFromLiteral("57390", token.INT, 0)),
		"LSS":                          reflect.ValueOf(constant.MakeFromLiteral("57391", token.INT, 0)),
		"LTE":                          reflect.ValueOf(constant.MakeFromLiteral("57392", token.INT, 0)),
		"LUNLESS":                      reflect.ValueOf(constant.MakeFromLiteral("57393", token.INT, 0)),
		"Lex":                          reflect.ValueOf(parser.Lex),
		"MAX":                          reflect.ValueOf(constant.MakeFromLiteral("57409", token.INT, 0)),
		"METRIC_IDENTIFIER":            reflect.ValueOf(constant.MakeFromLiteral("57360", token.INT, 0)),
		"MIN":                          reflect.ValueOf(constant.MakeFromLiteral("57410", token.INT, 0)),
		"MOD":                          reflect.ValueOf(constant.MakeFromLiteral("57394", token.INT, 0)),
		"MUL":                          reflect.ValueOf(constant.MakeFromLiteral("57395", token.INT, 0)),
		"MustGetFunction":              reflect.ValueOf(parser.MustGetFunction),
		"MustLabelMatcher":             reflect.ValueOf(parser.MustLabelMatcher),
		"NEGATIVE_BUCKETS_DESC":        reflect.ValueOf(constant.MakeFromLiteral("57376", token.INT, 0)),
		"NEGATIVE_OFFSET_DESC":         reflect.ValueOf(constant.MakeFromLiteral("57374", token.INT, 0)),
		"NEQ":                          reflect.ValueOf(constant.MakeFromLiteral("57396", token.INT, 0)),
		"NEQ_REGEX":                    reflect.ValueOf(constant.MakeFromLiteral("57397", token.INT, 0)),
		"NOT_COUNTER_RESET":            reflect.ValueOf(constant.MakeFromLiteral("57439", token.INT, 0)),
		"NUMBER":                       reflect.ValueOf(constant.MakeFromLiteral("57361", token.INT, 0)),
		"NewParser":                    reflect.ValueOf(parser.NewParser),
		"OFFSET":                       reflect.ValueOf(constant.MakeFromLiteral("57425", token.INT, 0)),
		"OFFSET_DESC":                  reflect.ValueOf(constant.MakeFromLiteral("57373", token.INT, 0)),
		"ON":                           reflect.ValueOf(constant.MakeFromLiteral("57428", token.INT, 0)),
		"OPEN_HIST":                    reflect.ValueOf(constant.MakeFromLiteral("57358", token.INT, 0)),
		"POW":                          reflect.ValueOf(constant.MakeFromLiteral("57398", token.INT, 0)),
		"ParseExpr":                    reflect.ValueOf(parser.ParseExpr),
		"ParseMetric":                  reflect.ValueOf(parser.ParseMetric),
		"ParseMetricSelector":          reflect.ValueOf(parser.ParseMetricSelector),
		"ParseMetricSelectors":         reflect.ValueOf(parser.ParseMetricSelectors),
		"ParseSeriesDesc":              reflect.ValueOf(parser.ParseSeriesDesc),
		"Prettify":                     reflect.ValueOf(parser.Prettify),
		"QUANTILE":                     reflect.ValueOf(constant.MakeFromLiteral("57411", token.INT, 0)),
		"RIGHT_BRACE":                  reflect.ValueOf(constant.MakeFromLiteral("57362", token.INT, 0)),
		"RIGHT_BRACKET":                reflect.ValueOf(constant.MakeFromLiteral("57363", token.INT, 0)),
		"RIGHT_PAREN":                  reflect.ValueOf(constant.MakeFromLiteral("57364", token.INT, 0)),
		"SCHEMA_DESC":                  reflect.ValueOf(constant.MakeFromLiteral("57372", token.INT, 0)),
		"SEMICOLON":                    reflect.ValueOf(constant.MakeFromLiteral("57365", token.INT, 0)),
		"SMOOTHED":                     reflect.ValueOf(constant.MakeFromLiteral("57426", token.INT, 0)),
		"SPACE":                        reflect.ValueOf(constant.MakeFromLiteral("57366", token.INT, 0)),
		"START":                        reflect.ValueOf(constant.MakeFromLiteral("57432", token.INT, 0)),
		"START_EXPRESSION":             reflect.ValueOf(constant.MakeFromLiteral("57445", token.INT, 0)),
		"START_METRIC":                 reflect.ValueOf(constant.MakeFromLiteral("57443", token.INT, 0)),
		"START_METRIC_SELECTOR":        reflect.ValueOf(constant.MakeFromLiteral("57446", token.INT, 0)),
		"START_SERIES_DESCRIPTION":     reflect.ValueOf(constant.MakeFromLiteral("57444", token.INT, 0)),
		"STDDEV":                       reflect.ValueOf(constant.MakeFromLiteral("57412", token.INT, 0)),
		"STDVAR":                       reflect.ValueOf(constant.MakeFromLiteral("57413", token.INT, 0)),
		"STEP":                         reflect.ValueOf(constant.MakeFromLiteral("57434", token.INT, 0)),
		"STRING":                       reflect.ValueOf(constant.MakeFromLiteral("57367", token.INT, 0)),
		"SUB":                          reflect.ValueOf(constant.MakeFromLiteral("57399", token.INT, 0)),
		"SUM":                          reflect.ValueOf(constant.MakeFromLiteral("57414", token.INT, 0)),
		"SUM_DESC":                     reflect.ValueOf(constant.MakeFromLiteral("57370", token.INT, 0)),
		"TIMES":                        reflect.ValueOf(constant.MakeFromLiteral("57368", token.INT, 0)),
		"TOPK":                         reflect.ValueOf(constant.MakeFromLiteral("57415", token.INT, 0)),
		"Tree":                         reflect.ValueOf(parser.Tree),
		"UNKNOWN_COUNTER_RESET":        reflect.ValueOf(constant.MakeFromLiteral("57437", token.INT, 0)),
		"ValueTypeMatrix":              reflect.ValueOf(parser.ValueTypeMatrix),
		"ValueTypeNone":                reflect.ValueOf(parser.ValueTypeNone),
		"ValueTypeScalar":              reflect.ValueOf(parser.ValueTypeScalar),
		"ValueTypeString":              reflect.ValueOf(parser.ValueTypeString),
		"ValueTypeVector":              reflect.ValueOf(parser.ValueTypeVector),
		"WITHOUT":                      reflect.ValueOf(constant.MakeFromLiteral("57429", token.INT, 0)),
		"Walk":                         reflect.ValueOf(parser.Walk),
		"WithFunctions":                reflect.ValueOf(parser.WithFunctions),
		"ZERO_BUCKET_DESC":             reflect.ValueOf(constant.MakeFromLiteral("57377", token.INT, 0)),
		"ZERO_BUCKET_WIDTH_DESC":       reflect.ValueOf(constant.MakeFromLiteral("57378", token.INT, 0)),

		// type definitions
		"AggregateExpr":          reflect.ValueOf((*parser.AggregateExpr)(nil)),
		"BinaryExpr":             reflect.ValueOf((*parser.BinaryExpr)(nil)),
		"Call":                   reflect.ValueOf((*parser.Call)(nil)),
		"DurationExpr":           reflect.ValueOf((*parser.DurationExpr)(nil)),
		"EvalStmt":               reflect.ValueOf((*parser.EvalStmt)(nil)),
		"Expr":                   reflect.ValueOf((*parser.Expr)(nil)),
		"Expressions":            reflect.ValueOf((*parser.Expressions)(nil)),
		"Function":               reflect.ValueOf((*parser.Function)(nil)),
		"Item":                   reflect.ValueOf((*parser.Item)(nil)),
		"ItemType":               reflect.ValueOf((*parser.ItemType)(nil)),
		"Lexer":                  reflect.ValueOf((*parser.Lexer)(nil)),
		"MatrixSelector":         reflect.ValueOf((*parser.MatrixSelector)(nil)),
		"Node":                   reflect.ValueOf((*parser.Node)(nil)),
		"NumberLiteral":          reflect.ValueOf((*parser.NumberLiteral)(nil)),
		"Opt":                    reflect.ValueOf((*parser.Opt)(nil)),
		"ParenExpr":              reflect.ValueOf((*parser.ParenExpr)(nil)),
		"ParseErr":               reflect.ValueOf((*parser.ParseErr)(nil)),
		"ParseErrors":            reflect.ValueOf((*parser.ParseErrors)(nil)),
		"Parser":                 reflect.ValueOf((*parser.Parser)(nil)),
		"SequenceValue":          reflect.ValueOf((*parser.SequenceValue)(nil)),
		"Statement":              reflect.ValueOf((*parser.Statement)(nil)),
		"StepInvariantExpr":      reflect.ValueOf((*parser.StepInvariantExpr)(nil)),
		"StringLiteral":          reflect.ValueOf((*parser.StringLiteral)(nil)),
		"SubqueryExpr":           reflect.ValueOf((*parser.SubqueryExpr)(nil)),
		"TestStmt":               reflect.ValueOf((*parser.TestStmt)(nil)),
		"UnaryExpr":              reflect.ValueOf((*parser.UnaryExpr)(nil)),
		"Value":                  reflect.ValueOf((*parser.Value)(nil)),
		"ValueType":              reflect.ValueOf((*parser.ValueType)(nil)),
		"VectorMatchCardinality": reflect.ValueOf((*parser.VectorMatchCardinality)(nil)),
		"VectorMatching":         reflect.ValueOf((*parser.VectorMatching)(nil)),
		"VectorSelector":         reflect.ValueOf((*parser.VectorSelector)(nil)),
		"Visitor":                reflect.ValueOf((*parser.Visitor)(nil)),

		// interface wrapper definitions
		"_Expr":      reflect.ValueOf((*_github_com_prometheus_prometheus_promql_parser_Expr)(nil)),
		"_Node":      reflect.ValueOf((*_github_com_prometheus_prometheus_promql_parser_Node)(nil)),
		"_Parser":    reflect.ValueOf((*_github_com_prometheus_prometheus_promql_parser_Parser)(nil)),
		"_Statement": reflect.ValueOf((*_github_com_prometheus_prometheus_promql_parser_Statement)(nil)),
		"_Value":     reflect.ValueOf((*_github_com_prometheus_prometheus_promql_parser_Value)(nil)),
		"_Visitor":   reflect.ValueOf((*_github_com_prometheus_prometheus_promql_parser_Visitor)(nil)),
	}
}

// _github_com_prometheus_prometheus_promql_parser_Expr is an interface wrapper for Expr type
type _github_com_prometheus_prometheus_promql_parser_Expr struct {
	IValue         interface{}
	WPositionRange func() posrange.PositionRange
	WPretty        func(level int) string
	WPromQLExpr    func()
	WString        func() string
	WType          func() parser.ValueType
}

func (W _github_com_prometheus_prometheus_promql_parser_Expr) PositionRange() posrange.PositionRange {
	return W.WPositionRange()
}
func (W _github_com_prometheus_prometheus_promql_parser_Expr) Pretty(level int) string {
	return W.WPretty(level)
}
func (W _github_com_prometheus_prometheus_promql_parser_Expr) PromQLExpr() {
	W.WPromQLExpr()
}
func (W _github_com_prometheus_prometheus_promql_parser_Expr) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _github_com_prometheus_prometheus_promql_parser_Expr) Type() parser.ValueType {
	return W.WType()
}

// _github_com_prometheus_prometheus_promql_parser_Node is an interface wrapper for Node type
type _github_com_prometheus_prometheus_promql_parser_Node struct {
	IValue         interface{}
	WPositionRange func() posrange.PositionRange
	WPretty        func(level int) string
	WString        func() string
}

func (W _github_com_prometheus_prometheus_promql_parser_Node) PositionRange() posrange.PositionRange {
	return W.WPositionRange()
}
func (W _github_com_prometheus_prometheus_promql_parser_Node) Pretty(level int) string {
	return W.WPretty(level)
}
func (W _github_com_prometheus_prometheus_promql_parser_Node) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_prometheus_prometheus_promql_parser_Parser is an interface wrapper for Parser type
type _github_com_prometheus_prometheus_promql_parser_Parser struct {
	IValue     interface{}
	WClose     func()
	WParseExpr func() (parser.Expr, error)
}

func (W _github_com_prometheus_prometheus_promql_parser_Parser) Close() {
	W.WClose()
}
func (W _github_com_prometheus_prometheus_promql_parser_Parser) ParseExpr() (parser.Expr, error) {
	return W.WParseExpr()
}

// _github_com_prometheus_prometheus_promql_parser_Statement is an interface wrapper for Statement type
type _github_com_prometheus_prometheus_promql_parser_Statement struct {
	IValue         interface{}
	WPositionRange func() posrange.PositionRange
	WPretty        func(level int) string
	WPromQLStmt    func()
	WString        func() string
}

func (W _github_com_prometheus_prometheus_promql_parser_Statement) PositionRange() posrange.PositionRange {
	return W.WPositionRange()
}
func (W _github_com_prometheus_prometheus_promql_parser_Statement) Pretty(level int) string {
	return W.WPretty(level)
}
func (W _github_com_prometheus_prometheus_promql_parser_Statement) PromQLStmt() {
	W.WPromQLStmt()
}
func (W _github_com_prometheus_prometheus_promql_parser_Statement) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}

// _github_com_prometheus_prometheus_promql_parser_Value is an interface wrapper for Value type
type _github_com_prometheus_prometheus_promql_parser_Value struct {
	IValue  interface{}
	WString func() string
	WType   func() parser.ValueType
}

func (W _github_com_prometheus_prometheus_promql_parser_Value) String() string {
	if W.WString == nil {
		return ""
	}
	return W.WString()
}
func (W _github_com_prometheus_prometheus_promql_parser_Value) Type() parser.ValueType {
	return W.WType()
}

// _github_com_prometheus_prometheus_promql_parser_Visitor is an interface wrapper for Visitor type
type _github_com_prometheus_prometheus_promql_parser_Visitor struct {
	IValue interface{}
	WVisit func(node parser.Node, path []parser.Node) (w parser.Visitor, err error)
}

func (W _github_com_prometheus_prometheus_promql_parser_Visitor) Visit(node parser.Node, path []parser.Node) (w parser.Visitor, err error) {
	return W.WVisit(node, path)
}
