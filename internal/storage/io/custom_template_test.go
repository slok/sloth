package io_test

import (
	"bytes"
	"context"
	"testing"
	"time"

	"github.com/prometheus/prometheus/model/rulefmt"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/slok/sloth/internal/log"
	"github.com/slok/sloth/internal/storage/io"
	"github.com/slok/sloth/pkg/common/model"
)

func TestGroupedRulesCustomGoTemplateRepo(t *testing.T) {
	tests := map[string]struct {
		tpl      string
		sloGroup io.TplSLOGroupResult
		expYAML  string
		expErr   bool
	}{
		"Having 0 SLO rules should fail.": {
			sloGroup: io.TplSLOGroupResult{},
			expErr:   true,
		},

		"Having 0 SLO rules generated should fail.": {
			sloGroup: io.TplSLOGroupResult{
				SLOGroup:  model.PromSLOGroup{},
				SLOResult: []io.TplSLOResult{},
			},
			expErr: true,
		},

		"Having a mix of SLOs should render them correctly.": {
			tpl: `---
# Code generated by Sloth:
# DO NOT EDIT.

groups:
{{- range .SLOResult }}
- name: sloth-slo-sli-{{ .SLO.ID }}
  rules:
    {{- range .PrometheusRules.SLIErrorRecRules.Rules }}
    - record: {{ .Record }}
      expr: {{ .Expr }}
      labels: {{ .Labels | toYAML | nindent 8 }}
      annotations: {{ .Annotations | toYAML | nindent 8 }}
    {{- end }}
- name: sloth-slo-metadata-{{ .SLO.ID }}
  rules:
    {{- range .PrometheusRules.MetadataRecRules.Rules }}
    - record: {{ .Record }}
      expr: {{ .Expr }}
      labels: {{ .Labels | toYAML | nindent 8 }}
      annotations: {{ .Annotations | toYAML | nindent 8 }}
    {{- end }}
- name: sloth-slo-alerts-{{ .SLO.ID }}
  interval: {{ .PrometheusRules.AlertRules.Interval }}
  rules:
    {{- range .PrometheusRules.AlertRules.Rules }}
    - alert: {{ .Alert }}
      expr: {{ .Expr }}
      labels: {{ .Labels | toYAML | nindent 8 }}
      annotations: {{ .Annotations | toYAML | nindent 8 }}
    {{- end }}
{{- end }}
`,
			sloGroup: io.TplSLOGroupResult{
				SLOGroup: model.PromSLOGroup{},
				SLOResult: []io.TplSLOResult{

					{
						SLO: model.PromSLO{ID: "testa"},
						PrometheusRules: model.PromSLORules{
							SLIErrorRecRules: model.PromRuleGroup{Rules: []rulefmt.Rule{
								{
									Record: "test:record-a1",
									Expr:   "test-expr-a1",
									Labels: map[string]string{"test-label": "a-1"},
								},
								{
									Record: "test:record-a2",
									Expr:   "test-expr-a2",
									Labels: map[string]string{"test-label": "a-2"},
								},
							}},
							MetadataRecRules: model.PromRuleGroup{
								Name: "custom-metadata-name-testa", // Custom name.
								Rules: []rulefmt.Rule{
									{
										Record: "test:record-a3",
										Expr:   "test-expr-a3",
										Labels: map[string]string{"test-label": "a-3"},
									},
									{
										Record: "test:record-a4",
										Expr:   "test-expr-a4",
										Labels: map[string]string{"test-label": "a-4"},
									},
								}},
							AlertRules: model.PromRuleGroup{
								Interval: 15 * time.Minute, // Custom interval.
								Rules: []rulefmt.Rule{
									{
										Alert:       "testAlertA1",
										Expr:        "test-expr-a1",
										Labels:      map[string]string{"test-label": "a-1"},
										Annotations: map[string]string{"test-annot": "a-1"},
									},
									{
										Alert:       "testAlertA2",
										Expr:        "test-expr-a2",
										Labels:      map[string]string{"test-label": "a-2"},
										Annotations: map[string]string{"test-annot": "a-2"},
									},
								}},
						},
					},
					{
						SLO: model.PromSLO{ID: "testb"},
						PrometheusRules: model.PromSLORules{
							SLIErrorRecRules: model.PromRuleGroup{Rules: []rulefmt.Rule{
								{
									Record: "test:record-b1",
									Expr:   "test-expr-b1",
									Labels: map[string]string{"test-label": "b-1"},
								},
							}},
							MetadataRecRules: model.PromRuleGroup{Rules: []rulefmt.Rule{
								{
									Record: "test:record-b2",
									Expr:   "test-expr-b2",
									Labels: map[string]string{"test-label": "b-2"},
								},
							}},
							AlertRules: model.PromRuleGroup{Rules: []rulefmt.Rule{
								{
									Alert:       "testAlertB1",
									Expr:        "test-expr-b1",
									Labels:      map[string]string{"test-label": "b-1"},
									Annotations: map[string]string{"test-annot": "b-1"},
								},
							}},
							ExtraRules: []model.PromRuleGroup{
								{Interval: 42 * time.Minute, Rules: []rulefmt.Rule{
									{
										Alert:       "testAlertZ1",
										Expr:        "test-expr-z1",
										Labels:      map[string]string{"test-label": "z-1"},
										Annotations: map[string]string{"test-annot": "z-1"},
									},
								}},
								{}, // Should be skipped.
								{
									Name: "custom-test-for-extra-rules-zzzzz",
									Rules: []rulefmt.Rule{
										{
											Alert:       "testAlertZ2",
											Expr:        "test-expr-z2",
											Labels:      map[string]string{"test-label": "z-2"},
											Annotations: map[string]string{"test-annot": "z-2"},
										},
										{
											Alert:       "testAlertZ3",
											Expr:        "test-expr-z3",
											Labels:      map[string]string{"test-label": "z-3"},
											Annotations: map[string]string{"test-annot": "z-3"},
										},
									},
								},
							},
						},
					},
				},
			},
			expYAML: `---
# Code generated by Sloth:
# DO NOT EDIT.

groups:
- name: sloth-slo-sli-testa
  rules:
    - record: test:record-a1
      expr: test-expr-a1
      labels: 
        test-label: a-1
      annotations: 
        {}
    - record: test:record-a2
      expr: test-expr-a2
      labels: 
        test-label: a-2
      annotations: 
        {}
- name: sloth-slo-metadata-testa
  rules:
    - record: test:record-a3
      expr: test-expr-a3
      labels: 
        test-label: a-3
      annotations: 
        {}
    - record: test:record-a4
      expr: test-expr-a4
      labels: 
        test-label: a-4
      annotations: 
        {}
- name: sloth-slo-alerts-testa
  interval: 15m0s
  rules:
    - alert: testAlertA1
      expr: test-expr-a1
      labels: 
        test-label: a-1
      annotations: 
        test-annot: a-1
    - alert: testAlertA2
      expr: test-expr-a2
      labels: 
        test-label: a-2
      annotations: 
        test-annot: a-2
- name: sloth-slo-sli-testb
  rules:
    - record: test:record-b1
      expr: test-expr-b1
      labels: 
        test-label: b-1
      annotations: 
        {}
- name: sloth-slo-metadata-testb
  rules:
    - record: test:record-b2
      expr: test-expr-b2
      labels: 
        test-label: b-2
      annotations: 
        {}
- name: sloth-slo-alerts-testb
  interval: 0s
  rules:
    - alert: testAlertB1
      expr: test-expr-b1
      labels: 
        test-label: b-1
      annotations: 
        test-annot: b-1
`,
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			assert := assert.New(t)
			require := require.New(t)

			var gotYAML bytes.Buffer
			repo, err := io.NewCustomGoTemplateRepo(&gotYAML, log.Noop, []byte(test.tpl))
			require.NoError(err)

			err = repo.StoreSLOs(context.TODO(), nil, test.sloGroup)
			if test.expErr {
				assert.Error(err)
			} else if assert.NoError(err) {
				assert.Equal(test.expYAML, gotYAML.String())
			}
		})
	}
}
